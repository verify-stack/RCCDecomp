/* generated/prototypes.h
   Generated by wsdl2h 1.2.17 from RCCService.wsdl and typemap.dat
   2025-03-10 01:06:10 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on generated/prototypes.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service uses SOAP 1.2 namespaces:
//gsoap SOAP-ENV schema namespace:	http://www.w3.org/2003/05/soap-envelope
//gsoap SOAP-ENC schema namespace:	http://www.w3.org/2003/05/soap-encoding

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://roblox.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://roblox.com/"
//gsoap ns1   schema namespace:	http://roblox.com/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__Status.
class ns1__Status;

//  Forward declaration of class ns1__Job.
class ns1__Job;

//  Forward declaration of class ns1__ScriptExecution.
class ns1__ScriptExecution;

//  Forward declaration of class ns1__ArrayOfLuaValue.
class ns1__ArrayOfLuaValue;

//  Forward declaration of class ns1__ArrayOfJob.
class ns1__ArrayOfJob;

//  Forward declaration of class ns1__LuaValue.
class ns1__LuaValue;

//  Forward declaration of class _ns1__HelloWorld.
class _ns1__HelloWorld;

//  Forward declaration of class _ns1__HelloWorldResponse.
class _ns1__HelloWorldResponse;

//  Forward declaration of class _ns1__GetVersion.
class _ns1__GetVersion;

//  Forward declaration of class _ns1__GetVersionResponse.
class _ns1__GetVersionResponse;

//  Forward declaration of class _ns1__GetStatus.
class _ns1__GetStatus;

//  Forward declaration of class _ns1__GetStatusResponse.
class _ns1__GetStatusResponse;

//  Forward declaration of class _ns1__OpenJob.
class _ns1__OpenJob;

//  Forward declaration of class _ns1__OpenJobEx.
class _ns1__OpenJobEx;

//  Forward declaration of class _ns1__OpenJobResponse.
class _ns1__OpenJobResponse;

//  Forward declaration of class _ns1__OpenJobExResponse.
class _ns1__OpenJobExResponse;

//  Forward declaration of class _ns1__RenewLease.
class _ns1__RenewLease;

//  Forward declaration of class _ns1__RenewLeaseResponse.
class _ns1__RenewLeaseResponse;

//  Forward declaration of class _ns1__Execute.
class _ns1__Execute;

//  Forward declaration of class _ns1__ExecuteResponse.
class _ns1__ExecuteResponse;

//  Forward declaration of class _ns1__ExecuteEx.
class _ns1__ExecuteEx;

//  Forward declaration of class _ns1__ExecuteExResponse.
class _ns1__ExecuteExResponse;

//  Forward declaration of class _ns1__CloseJob.
class _ns1__CloseJob;

//  Forward declaration of class _ns1__CloseJobResponse.
class _ns1__CloseJobResponse;

//  Forward declaration of class _ns1__BatchJob.
class _ns1__BatchJob;

//  Forward declaration of class _ns1__BatchJobResponse.
class _ns1__BatchJobResponse;

//  Forward declaration of class _ns1__BatchJobEx.
class _ns1__BatchJobEx;

//  Forward declaration of class _ns1__BatchJobExResponse.
class _ns1__BatchJobExResponse;

//  Forward declaration of class _ns1__GetExpiration.
class _ns1__GetExpiration;

//  Forward declaration of class _ns1__GetExpirationResponse.
class _ns1__GetExpirationResponse;

//  Forward declaration of class _ns1__GetAllJobs.
class _ns1__GetAllJobs;

//  Forward declaration of class _ns1__GetAllJobsResponse.
class _ns1__GetAllJobsResponse;

//  Forward declaration of class _ns1__GetAllJobsEx.
class _ns1__GetAllJobsEx;

//  Forward declaration of class _ns1__GetAllJobsExResponse.
class _ns1__GetAllJobsExResponse;

//  Forward declaration of class _ns1__CloseExpiredJobs.
class _ns1__CloseExpiredJobs;

//  Forward declaration of class _ns1__CloseExpiredJobsResponse.
class _ns1__CloseExpiredJobsResponse;

//  Forward declaration of class _ns1__CloseAllJobs.
class _ns1__CloseAllJobs;

//  Forward declaration of class _ns1__CloseAllJobsResponse.
class _ns1__CloseAllJobsResponse;

//  Forward declaration of class _ns1__Diag.
class _ns1__Diag;

//  Forward declaration of class _ns1__DiagResponse.
class _ns1__DiagResponse;

//  Forward declaration of class _ns1__DiagEx.
class _ns1__DiagEx;

//  Forward declaration of class _ns1__DiagExResponse.
class _ns1__DiagExResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/// "http://roblox.com/":LuaType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__LuaType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__LuaType
{
	ns1__LuaType__LUA_USCORETNIL,	///< xs:string value="LUA_TNIL"
	ns1__LuaType__LUA_USCORETBOOLEAN,	///< xs:string value="LUA_TBOOLEAN"
	ns1__LuaType__LUA_USCORETNUMBER,	///< xs:string value="LUA_TNUMBER"
	ns1__LuaType__LUA_USCORETSTRING,	///< xs:string value="LUA_TSTRING"
	ns1__LuaType__LUA_USCORETTABLE,	///< xs:string value="LUA_TTABLE"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/// "http://roblox.com/":Status is a complexType.
class ns1__Status
{ public:
/// Element version of type xs:string.
    std::string*                         version                        0;	///< Optional element.
/// Element environmentCount of type xs:int.
    int                                  environmentCount               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://roblox.com/":Job is a complexType.
class ns1__Job
{ public:
/// Element id of type xs:string.
    std::string                          id                             1;	///< Required element.
/// Element expirationInSeconds of type xs:double.
    double                               expirationInSeconds            1;	///< Required element.
/// Element category of type xs:int.
    int                                  category                       1;	///< Required element.
/// Element cores of type xs:double.
    double                               cores                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://roblox.com/":ScriptExecution is a complexType.
class ns1__ScriptExecution
{ public:
/// Element name of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element script of type xs:string.
    std::string*                         script                         0;	///< Optional element.
/// Element arguments of type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                arguments                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://roblox.com/":ArrayOfLuaValue is a complexType.
class ns1__ArrayOfLuaValue
{ public:
/// Vector of ns1__LuaValue* with length 0..unbounded
    std::vector<ns1__LuaValue*         > LuaValue                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://roblox.com/":ArrayOfJob is a complexType.
class ns1__ArrayOfJob
{ public:
/// Vector of ns1__Job* with length 0..unbounded
    std::vector<ns1__Job*              > Job                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://roblox.com/":LuaValue is a complexType.
class ns1__LuaValue
{ public:
/// Element type of type "http://roblox.com/":LuaType.
    enum ns1__LuaType                    type                           1;	///< Required element.
/// Element value of type xs:string.
    std::string*                         value                          0;	///< Optional element.
/// Element table of type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                table                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":HelloWorld

/// "http://roblox.com/":HelloWorld is a complexType.
class _ns1__HelloWorld
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":HelloWorldResponse

/// "http://roblox.com/":HelloWorldResponse is a complexType.
class _ns1__HelloWorldResponse
{ public:
/// Element HelloWorldResult of type xs:string.
    std::string*                         HelloWorldResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetVersion

/// "http://roblox.com/":GetVersion is a complexType.
class _ns1__GetVersion
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetVersionResponse

/// "http://roblox.com/":GetVersionResponse is a complexType.
class _ns1__GetVersionResponse
{ public:
/// Element GetVersionResult of type xs:string.
    std::string                          GetVersionResult               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetStatus

/// "http://roblox.com/":GetStatus is a complexType.
class _ns1__GetStatus
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetStatusResponse

/// "http://roblox.com/":GetStatusResponse is a complexType.
class _ns1__GetStatusResponse
{ public:
/// Element GetStatusResult of type "http://roblox.com/":Status.
    ns1__Status*                         GetStatusResult                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":OpenJob

/// "http://roblox.com/":OpenJob is a complexType.
class _ns1__OpenJob
{ public:
/// Element job of type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element script of type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":OpenJobEx

/// "http://roblox.com/":OpenJobEx is a complexType.
class _ns1__OpenJobEx
{ public:
/// Element job of type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element script of type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":OpenJobResponse

/// "http://roblox.com/":OpenJobResponse is a complexType.
class _ns1__OpenJobResponse
{ public:
/// Vector of ns1__LuaValue* with length 0..unbounded
    std::vector<ns1__LuaValue*         > OpenJobResult                  0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":OpenJobExResponse

/// "http://roblox.com/":OpenJobExResponse is a complexType.
class _ns1__OpenJobExResponse
{ public:
/// Element OpenJobExResult of type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                OpenJobExResult                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":RenewLease

/// "http://roblox.com/":RenewLease is a complexType.
class _ns1__RenewLease
{ public:
/// Element jobID of type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// Element expirationInSeconds of type xs:double.
    double                               expirationInSeconds            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":RenewLeaseResponse

/// "http://roblox.com/":RenewLeaseResponse is a complexType.
class _ns1__RenewLeaseResponse
{ public:
/// Element RenewLeaseResult of type xs:double.
    double                               RenewLeaseResult               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":Execute

/// "http://roblox.com/":Execute is a complexType.
class _ns1__Execute
{ public:
/// Element jobID of type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// Element script of type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":ExecuteResponse

/// "http://roblox.com/":ExecuteResponse is a complexType.
class _ns1__ExecuteResponse
{ public:
/// Vector of ns1__LuaValue* with length 1..unbounded
    std::vector<ns1__LuaValue*         > ExecuteResult                  1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":ExecuteEx

/// "http://roblox.com/":ExecuteEx is a complexType.
class _ns1__ExecuteEx
{ public:
/// Element jobID of type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// Element script of type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":ExecuteExResponse

/// "http://roblox.com/":ExecuteExResponse is a complexType.
class _ns1__ExecuteExResponse
{ public:
/// Element ExecuteExResult of type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                ExecuteExResult                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":CloseJob

/// "http://roblox.com/":CloseJob is a complexType.
class _ns1__CloseJob
{ public:
/// Element jobID of type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":CloseJobResponse

/// "http://roblox.com/":CloseJobResponse is a complexType.
class _ns1__CloseJobResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":BatchJob

/// "http://roblox.com/":BatchJob is a complexType.
class _ns1__BatchJob
{ public:
/// Element job of type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element script of type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":BatchJobResponse

/// "http://roblox.com/":BatchJobResponse is a complexType.
class _ns1__BatchJobResponse
{ public:
/// Vector of ns1__LuaValue* with length 1..unbounded
    std::vector<ns1__LuaValue*         > BatchJobResult                 1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":BatchJobEx

/// "http://roblox.com/":BatchJobEx is a complexType.
class _ns1__BatchJobEx
{ public:
/// Element job of type "http://roblox.com/":Job.
    ns1__Job*                            job                            1;	///< Required element.
/// Element script of type "http://roblox.com/":ScriptExecution.
    ns1__ScriptExecution*                script                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":BatchJobExResponse

/// "http://roblox.com/":BatchJobExResponse is a complexType.
class _ns1__BatchJobExResponse
{ public:
/// Element BatchJobExResult of type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                BatchJobExResult               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetExpiration

/// "http://roblox.com/":GetExpiration is a complexType.
class _ns1__GetExpiration
{ public:
/// Element jobID of type xs:string.
    std::string                          jobID                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetExpirationResponse

/// "http://roblox.com/":GetExpirationResponse is a complexType.
class _ns1__GetExpirationResponse
{ public:
/// Element GetExpirationResult of type xs:double.
    double                               GetExpirationResult            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetAllJobs

/// "http://roblox.com/":GetAllJobs is a complexType.
class _ns1__GetAllJobs
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetAllJobsResponse

/// "http://roblox.com/":GetAllJobsResponse is a complexType.
class _ns1__GetAllJobsResponse
{ public:
/// Vector of ns1__Job* with length 1..unbounded
    std::vector<ns1__Job*              > GetAllJobsResult               1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetAllJobsEx

/// "http://roblox.com/":GetAllJobsEx is a complexType.
class _ns1__GetAllJobsEx
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":GetAllJobsExResponse

/// "http://roblox.com/":GetAllJobsExResponse is a complexType.
class _ns1__GetAllJobsExResponse
{ public:
/// Element GetAllJobsExResult of type "http://roblox.com/":ArrayOfJob.
    ns1__ArrayOfJob*                     GetAllJobsExResult             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":CloseExpiredJobs

/// "http://roblox.com/":CloseExpiredJobs is a complexType.
class _ns1__CloseExpiredJobs
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":CloseExpiredJobsResponse

/// "http://roblox.com/":CloseExpiredJobsResponse is a complexType.
class _ns1__CloseExpiredJobsResponse
{ public:
/// Element CloseExpiredJobsResult of type xs:int.
    int                                  CloseExpiredJobsResult         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":CloseAllJobs

/// "http://roblox.com/":CloseAllJobs is a complexType.
class _ns1__CloseAllJobs
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":CloseAllJobsResponse

/// "http://roblox.com/":CloseAllJobsResponse is a complexType.
class _ns1__CloseAllJobsResponse
{ public:
/// Element CloseAllJobsResult of type xs:int.
    int                                  CloseAllJobsResult             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":Diag

/// "http://roblox.com/":Diag is a complexType.
class _ns1__Diag
{ public:
/// Element type of type xs:int.
    int                                  type                           1;	///< Required element.
/// Element jobID of type xs:string.
    std::string*                         jobID                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":DiagResponse

/// "http://roblox.com/":DiagResponse is a complexType.
class _ns1__DiagResponse
{ public:
/// Vector of ns1__LuaValue* with length 1..unbounded
    std::vector<ns1__LuaValue*         > DiagResult                     1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":DiagEx

/// "http://roblox.com/":DiagEx is a complexType.
class _ns1__DiagEx
{ public:
/// Element type of type xs:int.
    int                                  type                           1;	///< Required element.
/// Element jobID of type xs:string.
    std::string*                         jobID                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://roblox.com/":DiagExResponse

/// "http://roblox.com/":DiagExResponse is a complexType.
class _ns1__DiagExResponse
{ public:
/// Element DiagExResult of type "http://roblox.com/":ArrayOfLuaValue.
    ns1__ArrayOfLuaValue*                DiagExResult                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://roblox.com/                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns2  service name:	RCCServiceSoap 
//gsoap ns2  service type:	RCCServiceSoap 
//gsoap ns2  service namespace:	http://roblox.com/RCCServiceSoap 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns3  service name:	RCCServiceSoap12 
//gsoap ns3  service type:	RCCServiceSoap 
//gsoap ns3  service namespace:	http://roblox.com/RCCServiceSoap12 
//gsoap ns3  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref RCCServiceSoap

  - @ref RCCServiceSoap12

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page RCCServiceSoap Binding "RCCServiceSoap"

@section RCCServiceSoap_operations Operations of Binding  "RCCServiceSoap"

  - @ref __ns2__HelloWorld

  - @ref __ns2__GetVersion

  - @ref __ns2__GetStatus

  - @ref __ns2__OpenJob

  - @ref __ns2__OpenJobEx

  - @ref __ns2__RenewLease

  - @ref __ns2__Execute

  - @ref __ns2__ExecuteEx

  - @ref __ns2__CloseJob

  - @ref __ns2__BatchJob

  - @ref __ns2__BatchJobEx

  - @ref __ns2__GetExpiration

  - @ref __ns2__GetAllJobs

  - @ref __ns2__GetAllJobsEx

  - @ref __ns2__CloseExpiredJobs

  - @ref __ns2__CloseAllJobs

  - @ref __ns2__Diag

  - @ref __ns2__DiagEx

@section RCCServiceSoap_ports Endpoints of Binding  "RCCServiceSoap"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page RCCServiceSoap12 Binding "RCCServiceSoap12"

@section RCCServiceSoap12_operations Operations of Binding  "RCCServiceSoap12"

  - @ref __ns3__HelloWorld

  - @ref __ns3__GetVersion

  - @ref __ns3__GetStatus

  - @ref __ns3__OpenJob

  - @ref __ns3__OpenJobEx

  - @ref __ns3__RenewLease

  - @ref __ns3__Execute

  - @ref __ns3__ExecuteEx

  - @ref __ns3__CloseJob

  - @ref __ns3__BatchJob

  - @ref __ns3__BatchJobEx

  - @ref __ns3__GetExpiration

  - @ref __ns3__GetAllJobs

  - @ref __ns3__GetAllJobsEx

  - @ref __ns3__CloseExpiredJobs

  - @ref __ns3__CloseAllJobs

  - @ref __ns3__Diag

  - @ref __ns3__DiagEx

@section RCCServiceSoap12_ports Endpoints of Binding  "RCCServiceSoap12"

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   RCCServiceSoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__HelloWorld                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__HelloWorld" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/HelloWorld"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__HelloWorld(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // response parameters:
    _ns1__HelloWorldResponse*           ns1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__HelloWorld(
    struct soap *soap,
    // request parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // response parameters:
    _ns1__HelloWorldResponse*           ns1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	HelloWorld document
//gsoap ns2  service method-encoding:	HelloWorld literal
//gsoap ns2  service method-action:	HelloWorld http://roblox.com/HelloWorld
int __ns2__HelloWorld(
    _ns1__HelloWorld*                   ns1__HelloWorld,	///< Request parameter
    _ns1__HelloWorldResponse*           ns1__HelloWorldResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetVersion                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetVersion" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetVersion"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // response parameters:
    _ns1__GetVersionResponse*           ns1__GetVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetVersion(
    struct soap *soap,
    // request parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // response parameters:
    _ns1__GetVersionResponse*           ns1__GetVersionResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetVersion document
//gsoap ns2  service method-encoding:	GetVersion literal
//gsoap ns2  service method-action:	GetVersion http://roblox.com/GetVersion
int __ns2__GetVersion(
    _ns1__GetVersion*                   ns1__GetVersion,	///< Request parameter
    _ns1__GetVersionResponse*           ns1__GetVersionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetStatus                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetStatus" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // response parameters:
    _ns1__GetStatusResponse*            ns1__GetStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetStatus(
    struct soap *soap,
    // request parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // response parameters:
    _ns1__GetStatusResponse*            ns1__GetStatusResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetStatus document
//gsoap ns2  service method-encoding:	GetStatus literal
//gsoap ns2  service method-action:	GetStatus http://roblox.com/GetStatus
int __ns2__GetStatus(
    _ns1__GetStatus*                    ns1__GetStatus,	///< Request parameter
    _ns1__GetStatusResponse*            ns1__GetStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__OpenJob                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__OpenJob" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/OpenJob"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__OpenJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // response parameters:
    _ns1__OpenJobResponse*              ns1__OpenJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__OpenJob(
    struct soap *soap,
    // request parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // response parameters:
    _ns1__OpenJobResponse*              ns1__OpenJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	OpenJob document
//gsoap ns2  service method-encoding:	OpenJob literal
//gsoap ns2  service method-action:	OpenJob http://roblox.com/OpenJob
int __ns2__OpenJob(
    _ns1__OpenJob*                      ns1__OpenJob,	///< Request parameter
    _ns1__OpenJobResponse*              ns1__OpenJobResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__OpenJobEx                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__OpenJobEx" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/OpenJobEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__OpenJobEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // response parameters:
    _ns1__OpenJobExResponse*            ns1__OpenJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__OpenJobEx(
    struct soap *soap,
    // request parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // response parameters:
    _ns1__OpenJobExResponse*            ns1__OpenJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	OpenJobEx document
//gsoap ns2  service method-encoding:	OpenJobEx literal
//gsoap ns2  service method-action:	OpenJobEx http://roblox.com/OpenJobEx
int __ns2__OpenJobEx(
    _ns1__OpenJobEx*                    ns1__OpenJobEx,	///< Request parameter
    _ns1__OpenJobExResponse*            ns1__OpenJobExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__RenewLease                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__RenewLease" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/RenewLease"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__RenewLease(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // response parameters:
    _ns1__RenewLeaseResponse*           ns1__RenewLeaseResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__RenewLease(
    struct soap *soap,
    // request parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // response parameters:
    _ns1__RenewLeaseResponse*           ns1__RenewLeaseResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	RenewLease document
//gsoap ns2  service method-encoding:	RenewLease literal
//gsoap ns2  service method-action:	RenewLease http://roblox.com/RenewLease
int __ns2__RenewLease(
    _ns1__RenewLease*                   ns1__RenewLease,	///< Request parameter
    _ns1__RenewLeaseResponse*           ns1__RenewLeaseResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__Execute                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__Execute" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/Execute"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__Execute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Execute*                      ns1__Execute,
    // response parameters:
    _ns1__ExecuteResponse*              ns1__ExecuteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__Execute(
    struct soap *soap,
    // request parameters:
    _ns1__Execute*                      ns1__Execute,
    // response parameters:
    _ns1__ExecuteResponse*              ns1__ExecuteResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	Execute document
//gsoap ns2  service method-encoding:	Execute literal
//gsoap ns2  service method-action:	Execute http://roblox.com/Execute
int __ns2__Execute(
    _ns1__Execute*                      ns1__Execute,	///< Request parameter
    _ns1__ExecuteResponse*              ns1__ExecuteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__ExecuteEx                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__ExecuteEx" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/ExecuteEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__ExecuteEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // response parameters:
    _ns1__ExecuteExResponse*            ns1__ExecuteExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__ExecuteEx(
    struct soap *soap,
    // request parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // response parameters:
    _ns1__ExecuteExResponse*            ns1__ExecuteExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	ExecuteEx document
//gsoap ns2  service method-encoding:	ExecuteEx literal
//gsoap ns2  service method-action:	ExecuteEx http://roblox.com/ExecuteEx
int __ns2__ExecuteEx(
    _ns1__ExecuteEx*                    ns1__ExecuteEx,	///< Request parameter
    _ns1__ExecuteExResponse*            ns1__ExecuteExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CloseJob                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__CloseJob" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/CloseJob"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CloseJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // response parameters:
    _ns1__CloseJobResponse*             ns1__CloseJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CloseJob(
    struct soap *soap,
    // request parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // response parameters:
    _ns1__CloseJobResponse*             ns1__CloseJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	CloseJob document
//gsoap ns2  service method-encoding:	CloseJob literal
//gsoap ns2  service method-action:	CloseJob http://roblox.com/CloseJob
int __ns2__CloseJob(
    _ns1__CloseJob*                     ns1__CloseJob,	///< Request parameter
    _ns1__CloseJobResponse*             ns1__CloseJobResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__BatchJob                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__BatchJob" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/BatchJob"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__BatchJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // response parameters:
    _ns1__BatchJobResponse*             ns1__BatchJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__BatchJob(
    struct soap *soap,
    // request parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // response parameters:
    _ns1__BatchJobResponse*             ns1__BatchJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	BatchJob document
//gsoap ns2  service method-encoding:	BatchJob literal
//gsoap ns2  service method-action:	BatchJob http://roblox.com/BatchJob
int __ns2__BatchJob(
    _ns1__BatchJob*                     ns1__BatchJob,	///< Request parameter
    _ns1__BatchJobResponse*             ns1__BatchJobResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__BatchJobEx                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__BatchJobEx" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/BatchJobEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__BatchJobEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // response parameters:
    _ns1__BatchJobExResponse*           ns1__BatchJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__BatchJobEx(
    struct soap *soap,
    // request parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // response parameters:
    _ns1__BatchJobExResponse*           ns1__BatchJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	BatchJobEx document
//gsoap ns2  service method-encoding:	BatchJobEx literal
//gsoap ns2  service method-action:	BatchJobEx http://roblox.com/BatchJobEx
int __ns2__BatchJobEx(
    _ns1__BatchJobEx*                   ns1__BatchJobEx,	///< Request parameter
    _ns1__BatchJobExResponse*           ns1__BatchJobExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetExpiration                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetExpiration" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetExpiration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetExpiration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // response parameters:
    _ns1__GetExpirationResponse*        ns1__GetExpirationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetExpiration(
    struct soap *soap,
    // request parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // response parameters:
    _ns1__GetExpirationResponse*        ns1__GetExpirationResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetExpiration document
//gsoap ns2  service method-encoding:	GetExpiration literal
//gsoap ns2  service method-action:	GetExpiration http://roblox.com/GetExpiration
int __ns2__GetExpiration(
    _ns1__GetExpiration*                ns1__GetExpiration,	///< Request parameter
    _ns1__GetExpirationResponse*        ns1__GetExpirationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAllJobs                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAllJobs" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetAllJobs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAllJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // response parameters:
    _ns1__GetAllJobsResponse*           ns1__GetAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAllJobs(
    struct soap *soap,
    // request parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // response parameters:
    _ns1__GetAllJobsResponse*           ns1__GetAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetAllJobs document
//gsoap ns2  service method-encoding:	GetAllJobs literal
//gsoap ns2  service method-action:	GetAllJobs http://roblox.com/GetAllJobs
int __ns2__GetAllJobs(
    _ns1__GetAllJobs*                   ns1__GetAllJobs,	///< Request parameter
    _ns1__GetAllJobsResponse*           ns1__GetAllJobsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAllJobsEx                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAllJobsEx" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetAllJobsEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAllJobsEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // response parameters:
    _ns1__GetAllJobsExResponse*         ns1__GetAllJobsExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAllJobsEx(
    struct soap *soap,
    // request parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // response parameters:
    _ns1__GetAllJobsExResponse*         ns1__GetAllJobsExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetAllJobsEx document
//gsoap ns2  service method-encoding:	GetAllJobsEx literal
//gsoap ns2  service method-action:	GetAllJobsEx http://roblox.com/GetAllJobsEx
int __ns2__GetAllJobsEx(
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,	///< Request parameter
    _ns1__GetAllJobsExResponse*         ns1__GetAllJobsExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CloseExpiredJobs                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__CloseExpiredJobs" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/CloseExpiredJobs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CloseExpiredJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // response parameters:
    _ns1__CloseExpiredJobsResponse*     ns1__CloseExpiredJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CloseExpiredJobs(
    struct soap *soap,
    // request parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // response parameters:
    _ns1__CloseExpiredJobsResponse*     ns1__CloseExpiredJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	CloseExpiredJobs document
//gsoap ns2  service method-encoding:	CloseExpiredJobs literal
//gsoap ns2  service method-action:	CloseExpiredJobs http://roblox.com/CloseExpiredJobs
int __ns2__CloseExpiredJobs(
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,	///< Request parameter
    _ns1__CloseExpiredJobsResponse*     ns1__CloseExpiredJobsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CloseAllJobs                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__CloseAllJobs" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/CloseAllJobs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CloseAllJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // response parameters:
    _ns1__CloseAllJobsResponse*         ns1__CloseAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CloseAllJobs(
    struct soap *soap,
    // request parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // response parameters:
    _ns1__CloseAllJobsResponse*         ns1__CloseAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	CloseAllJobs document
//gsoap ns2  service method-encoding:	CloseAllJobs literal
//gsoap ns2  service method-action:	CloseAllJobs http://roblox.com/CloseAllJobs
int __ns2__CloseAllJobs(
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,	///< Request parameter
    _ns1__CloseAllJobsResponse*         ns1__CloseAllJobsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__Diag                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__Diag" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/Diag"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__Diag(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Diag*                         ns1__Diag,
    // response parameters:
    _ns1__DiagResponse*                 ns1__DiagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__Diag(
    struct soap *soap,
    // request parameters:
    _ns1__Diag*                         ns1__Diag,
    // response parameters:
    _ns1__DiagResponse*                 ns1__DiagResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	Diag document
//gsoap ns2  service method-encoding:	Diag literal
//gsoap ns2  service method-action:	Diag http://roblox.com/Diag
int __ns2__Diag(
    _ns1__Diag*                         ns1__Diag,	///< Request parameter
    _ns1__DiagResponse*                 ns1__DiagResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__DiagEx                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__DiagEx" of service binding "RCCServiceSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/DiagEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__DiagEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // response parameters:
    _ns1__DiagExResponse*               ns1__DiagExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__DiagEx(
    struct soap *soap,
    // request parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // response parameters:
    _ns1__DiagExResponse*               ns1__DiagExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoapProxy.h):
@code
  class RCCServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoapService.h):
@code
  class RCCServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	DiagEx document
//gsoap ns2  service method-encoding:	DiagEx literal
//gsoap ns2  service method-action:	DiagEx http://roblox.com/DiagEx
int __ns2__DiagEx(
    _ns1__DiagEx*                       ns1__DiagEx,	///< Request parameter
    _ns1__DiagExResponse*               ns1__DiagExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   RCCServiceSoap12                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__HelloWorld                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__HelloWorld" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/HelloWorld"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__HelloWorld(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // response parameters:
    _ns1__HelloWorldResponse*           ns1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__HelloWorld(
    struct soap *soap,
    // request parameters:
    _ns1__HelloWorld*                   ns1__HelloWorld,
    // response parameters:
    _ns1__HelloWorldResponse*           ns1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	HelloWorld document
//gsoap ns3  service method-encoding:	HelloWorld literal
//gsoap ns3  service method-action:	HelloWorld http://roblox.com/HelloWorld
int __ns3__HelloWorld(
    _ns1__HelloWorld*                   ns1__HelloWorld,	///< Request parameter
    _ns1__HelloWorldResponse*           ns1__HelloWorldResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetVersion                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetVersion" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetVersion"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // response parameters:
    _ns1__GetVersionResponse*           ns1__GetVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetVersion(
    struct soap *soap,
    // request parameters:
    _ns1__GetVersion*                   ns1__GetVersion,
    // response parameters:
    _ns1__GetVersionResponse*           ns1__GetVersionResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetVersion document
//gsoap ns3  service method-encoding:	GetVersion literal
//gsoap ns3  service method-action:	GetVersion http://roblox.com/GetVersion
int __ns3__GetVersion(
    _ns1__GetVersion*                   ns1__GetVersion,	///< Request parameter
    _ns1__GetVersionResponse*           ns1__GetVersionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetStatus                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetStatus" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetStatus"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // response parameters:
    _ns1__GetStatusResponse*            ns1__GetStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetStatus(
    struct soap *soap,
    // request parameters:
    _ns1__GetStatus*                    ns1__GetStatus,
    // response parameters:
    _ns1__GetStatusResponse*            ns1__GetStatusResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetStatus document
//gsoap ns3  service method-encoding:	GetStatus literal
//gsoap ns3  service method-action:	GetStatus http://roblox.com/GetStatus
int __ns3__GetStatus(
    _ns1__GetStatus*                    ns1__GetStatus,	///< Request parameter
    _ns1__GetStatusResponse*            ns1__GetStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__OpenJob                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__OpenJob" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/OpenJob"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__OpenJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // response parameters:
    _ns1__OpenJobResponse*              ns1__OpenJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__OpenJob(
    struct soap *soap,
    // request parameters:
    _ns1__OpenJob*                      ns1__OpenJob,
    // response parameters:
    _ns1__OpenJobResponse*              ns1__OpenJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	OpenJob document
//gsoap ns3  service method-encoding:	OpenJob literal
//gsoap ns3  service method-action:	OpenJob http://roblox.com/OpenJob
int __ns3__OpenJob(
    _ns1__OpenJob*                      ns1__OpenJob,	///< Request parameter
    _ns1__OpenJobResponse*              ns1__OpenJobResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__OpenJobEx                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__OpenJobEx" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/OpenJobEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__OpenJobEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // response parameters:
    _ns1__OpenJobExResponse*            ns1__OpenJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__OpenJobEx(
    struct soap *soap,
    // request parameters:
    _ns1__OpenJobEx*                    ns1__OpenJobEx,
    // response parameters:
    _ns1__OpenJobExResponse*            ns1__OpenJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	OpenJobEx document
//gsoap ns3  service method-encoding:	OpenJobEx literal
//gsoap ns3  service method-action:	OpenJobEx http://roblox.com/OpenJobEx
int __ns3__OpenJobEx(
    _ns1__OpenJobEx*                    ns1__OpenJobEx,	///< Request parameter
    _ns1__OpenJobExResponse*            ns1__OpenJobExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__RenewLease                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__RenewLease" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/RenewLease"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__RenewLease(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // response parameters:
    _ns1__RenewLeaseResponse*           ns1__RenewLeaseResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__RenewLease(
    struct soap *soap,
    // request parameters:
    _ns1__RenewLease*                   ns1__RenewLease,
    // response parameters:
    _ns1__RenewLeaseResponse*           ns1__RenewLeaseResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	RenewLease document
//gsoap ns3  service method-encoding:	RenewLease literal
//gsoap ns3  service method-action:	RenewLease http://roblox.com/RenewLease
int __ns3__RenewLease(
    _ns1__RenewLease*                   ns1__RenewLease,	///< Request parameter
    _ns1__RenewLeaseResponse*           ns1__RenewLeaseResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__Execute                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__Execute" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/Execute"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__Execute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Execute*                      ns1__Execute,
    // response parameters:
    _ns1__ExecuteResponse*              ns1__ExecuteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__Execute(
    struct soap *soap,
    // request parameters:
    _ns1__Execute*                      ns1__Execute,
    // response parameters:
    _ns1__ExecuteResponse*              ns1__ExecuteResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	Execute document
//gsoap ns3  service method-encoding:	Execute literal
//gsoap ns3  service method-action:	Execute http://roblox.com/Execute
int __ns3__Execute(
    _ns1__Execute*                      ns1__Execute,	///< Request parameter
    _ns1__ExecuteResponse*              ns1__ExecuteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__ExecuteEx                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__ExecuteEx" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/ExecuteEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__ExecuteEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // response parameters:
    _ns1__ExecuteExResponse*            ns1__ExecuteExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__ExecuteEx(
    struct soap *soap,
    // request parameters:
    _ns1__ExecuteEx*                    ns1__ExecuteEx,
    // response parameters:
    _ns1__ExecuteExResponse*            ns1__ExecuteExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	ExecuteEx document
//gsoap ns3  service method-encoding:	ExecuteEx literal
//gsoap ns3  service method-action:	ExecuteEx http://roblox.com/ExecuteEx
int __ns3__ExecuteEx(
    _ns1__ExecuteEx*                    ns1__ExecuteEx,	///< Request parameter
    _ns1__ExecuteExResponse*            ns1__ExecuteExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__CloseJob                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__CloseJob" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/CloseJob"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__CloseJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // response parameters:
    _ns1__CloseJobResponse*             ns1__CloseJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__CloseJob(
    struct soap *soap,
    // request parameters:
    _ns1__CloseJob*                     ns1__CloseJob,
    // response parameters:
    _ns1__CloseJobResponse*             ns1__CloseJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	CloseJob document
//gsoap ns3  service method-encoding:	CloseJob literal
//gsoap ns3  service method-action:	CloseJob http://roblox.com/CloseJob
int __ns3__CloseJob(
    _ns1__CloseJob*                     ns1__CloseJob,	///< Request parameter
    _ns1__CloseJobResponse*             ns1__CloseJobResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__BatchJob                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__BatchJob" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/BatchJob"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__BatchJob(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // response parameters:
    _ns1__BatchJobResponse*             ns1__BatchJobResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__BatchJob(
    struct soap *soap,
    // request parameters:
    _ns1__BatchJob*                     ns1__BatchJob,
    // response parameters:
    _ns1__BatchJobResponse*             ns1__BatchJobResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	BatchJob document
//gsoap ns3  service method-encoding:	BatchJob literal
//gsoap ns3  service method-action:	BatchJob http://roblox.com/BatchJob
int __ns3__BatchJob(
    _ns1__BatchJob*                     ns1__BatchJob,	///< Request parameter
    _ns1__BatchJobResponse*             ns1__BatchJobResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__BatchJobEx                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__BatchJobEx" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/BatchJobEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__BatchJobEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // response parameters:
    _ns1__BatchJobExResponse*           ns1__BatchJobExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__BatchJobEx(
    struct soap *soap,
    // request parameters:
    _ns1__BatchJobEx*                   ns1__BatchJobEx,
    // response parameters:
    _ns1__BatchJobExResponse*           ns1__BatchJobExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	BatchJobEx document
//gsoap ns3  service method-encoding:	BatchJobEx literal
//gsoap ns3  service method-action:	BatchJobEx http://roblox.com/BatchJobEx
int __ns3__BatchJobEx(
    _ns1__BatchJobEx*                   ns1__BatchJobEx,	///< Request parameter
    _ns1__BatchJobExResponse*           ns1__BatchJobExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetExpiration                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetExpiration" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetExpiration"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetExpiration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // response parameters:
    _ns1__GetExpirationResponse*        ns1__GetExpirationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetExpiration(
    struct soap *soap,
    // request parameters:
    _ns1__GetExpiration*                ns1__GetExpiration,
    // response parameters:
    _ns1__GetExpirationResponse*        ns1__GetExpirationResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetExpiration document
//gsoap ns3  service method-encoding:	GetExpiration literal
//gsoap ns3  service method-action:	GetExpiration http://roblox.com/GetExpiration
int __ns3__GetExpiration(
    _ns1__GetExpiration*                ns1__GetExpiration,	///< Request parameter
    _ns1__GetExpirationResponse*        ns1__GetExpirationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetAllJobs                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetAllJobs" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetAllJobs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetAllJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // response parameters:
    _ns1__GetAllJobsResponse*           ns1__GetAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetAllJobs(
    struct soap *soap,
    // request parameters:
    _ns1__GetAllJobs*                   ns1__GetAllJobs,
    // response parameters:
    _ns1__GetAllJobsResponse*           ns1__GetAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetAllJobs document
//gsoap ns3  service method-encoding:	GetAllJobs literal
//gsoap ns3  service method-action:	GetAllJobs http://roblox.com/GetAllJobs
int __ns3__GetAllJobs(
    _ns1__GetAllJobs*                   ns1__GetAllJobs,	///< Request parameter
    _ns1__GetAllJobsResponse*           ns1__GetAllJobsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetAllJobsEx                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetAllJobsEx" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/GetAllJobsEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetAllJobsEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // response parameters:
    _ns1__GetAllJobsExResponse*         ns1__GetAllJobsExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetAllJobsEx(
    struct soap *soap,
    // request parameters:
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,
    // response parameters:
    _ns1__GetAllJobsExResponse*         ns1__GetAllJobsExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetAllJobsEx document
//gsoap ns3  service method-encoding:	GetAllJobsEx literal
//gsoap ns3  service method-action:	GetAllJobsEx http://roblox.com/GetAllJobsEx
int __ns3__GetAllJobsEx(
    _ns1__GetAllJobsEx*                 ns1__GetAllJobsEx,	///< Request parameter
    _ns1__GetAllJobsExResponse*         ns1__GetAllJobsExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__CloseExpiredJobs                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__CloseExpiredJobs" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/CloseExpiredJobs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__CloseExpiredJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // response parameters:
    _ns1__CloseExpiredJobsResponse*     ns1__CloseExpiredJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__CloseExpiredJobs(
    struct soap *soap,
    // request parameters:
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,
    // response parameters:
    _ns1__CloseExpiredJobsResponse*     ns1__CloseExpiredJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	CloseExpiredJobs document
//gsoap ns3  service method-encoding:	CloseExpiredJobs literal
//gsoap ns3  service method-action:	CloseExpiredJobs http://roblox.com/CloseExpiredJobs
int __ns3__CloseExpiredJobs(
    _ns1__CloseExpiredJobs*             ns1__CloseExpiredJobs,	///< Request parameter
    _ns1__CloseExpiredJobsResponse*     ns1__CloseExpiredJobsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__CloseAllJobs                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__CloseAllJobs" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/CloseAllJobs"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__CloseAllJobs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // response parameters:
    _ns1__CloseAllJobsResponse*         ns1__CloseAllJobsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__CloseAllJobs(
    struct soap *soap,
    // request parameters:
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,
    // response parameters:
    _ns1__CloseAllJobsResponse*         ns1__CloseAllJobsResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	CloseAllJobs document
//gsoap ns3  service method-encoding:	CloseAllJobs literal
//gsoap ns3  service method-action:	CloseAllJobs http://roblox.com/CloseAllJobs
int __ns3__CloseAllJobs(
    _ns1__CloseAllJobs*                 ns1__CloseAllJobs,	///< Request parameter
    _ns1__CloseAllJobsResponse*         ns1__CloseAllJobsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__Diag                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__Diag" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/Diag"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__Diag(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Diag*                         ns1__Diag,
    // response parameters:
    _ns1__DiagResponse*                 ns1__DiagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__Diag(
    struct soap *soap,
    // request parameters:
    _ns1__Diag*                         ns1__Diag,
    // response parameters:
    _ns1__DiagResponse*                 ns1__DiagResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	Diag document
//gsoap ns3  service method-encoding:	Diag literal
//gsoap ns3  service method-action:	Diag http://roblox.com/Diag
int __ns3__Diag(
    _ns1__Diag*                         ns1__Diag,	///< Request parameter
    _ns1__DiagResponse*                 ns1__DiagResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__DiagEx                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__DiagEx" of service binding "RCCServiceSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="http://roblox.com/DiagEx"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__DiagEx(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // response parameters:
    _ns1__DiagExResponse*               ns1__DiagExResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__DiagEx(
    struct soap *soap,
    // request parameters:
    _ns1__DiagEx*                       ns1__DiagEx,
    // response parameters:
    _ns1__DiagExResponse*               ns1__DiagExResponse
  );
@endcode

C++ proxy class (defined in soapRCCServiceSoap12Proxy.h):
@code
  class RCCServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRCCServiceSoap12Service.h):
@code
  class RCCServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	DiagEx document
//gsoap ns3  service method-encoding:	DiagEx literal
//gsoap ns3  service method-action:	DiagEx http://roblox.com/DiagEx
int __ns3__DiagEx(
    _ns1__DiagEx*                       ns1__DiagEx,	///< Request parameter
    _ns1__DiagExResponse*               ns1__DiagExResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://roblox.com/"

  - <ns1:HelloWorld> @ref _ns1__HelloWorld
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__HelloWorld(struct soap*, _ns1__HelloWorld*);
    @endcode

  - <ns1:HelloWorldResponse> @ref _ns1__HelloWorldResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__HelloWorldResponse(struct soap*, _ns1__HelloWorldResponse*);
    @endcode

  - <ns1:GetVersion> @ref _ns1__GetVersion
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVersion(struct soap*, _ns1__GetVersion*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVersion(struct soap*, _ns1__GetVersion*);
    @endcode

  - <ns1:GetVersionResponse> @ref _ns1__GetVersionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetVersionResponse(struct soap*, _ns1__GetVersionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetVersionResponse(struct soap*, _ns1__GetVersionResponse*);
    @endcode

  - <ns1:GetStatus> @ref _ns1__GetStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetStatus(struct soap*, _ns1__GetStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetStatus(struct soap*, _ns1__GetStatus*);
    @endcode

  - <ns1:GetStatusResponse> @ref _ns1__GetStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetStatusResponse(struct soap*, _ns1__GetStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetStatusResponse(struct soap*, _ns1__GetStatusResponse*);
    @endcode

  - <ns1:OpenJob> @ref _ns1__OpenJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJob(struct soap*, _ns1__OpenJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJob(struct soap*, _ns1__OpenJob*);
    @endcode

  - <ns1:OpenJobEx> @ref _ns1__OpenJobEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJobEx(struct soap*, _ns1__OpenJobEx*);
    @endcode

  - <ns1:OpenJobResponse> @ref _ns1__OpenJobResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJobResponse(struct soap*, _ns1__OpenJobResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJobResponse(struct soap*, _ns1__OpenJobResponse*);
    @endcode

  - <ns1:OpenJobExResponse> @ref _ns1__OpenJobExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OpenJobExResponse(struct soap*, _ns1__OpenJobExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OpenJobExResponse(struct soap*, _ns1__OpenJobExResponse*);
    @endcode

  - <ns1:RenewLease> @ref _ns1__RenewLease
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RenewLease(struct soap*, _ns1__RenewLease*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RenewLease(struct soap*, _ns1__RenewLease*);
    @endcode

  - <ns1:RenewLeaseResponse> @ref _ns1__RenewLeaseResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RenewLeaseResponse(struct soap*, _ns1__RenewLeaseResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RenewLeaseResponse(struct soap*, _ns1__RenewLeaseResponse*);
    @endcode

  - <ns1:Execute> @ref _ns1__Execute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Execute(struct soap*, _ns1__Execute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Execute(struct soap*, _ns1__Execute*);
    @endcode

  - <ns1:ExecuteResponse> @ref _ns1__ExecuteResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse*);
    @endcode

  - <ns1:ExecuteEx> @ref _ns1__ExecuteEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteEx(struct soap*, _ns1__ExecuteEx*);
    @endcode

  - <ns1:ExecuteExResponse> @ref _ns1__ExecuteExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExecuteExResponse(struct soap*, _ns1__ExecuteExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExecuteExResponse(struct soap*, _ns1__ExecuteExResponse*);
    @endcode

  - <ns1:CloseJob> @ref _ns1__CloseJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseJob(struct soap*, _ns1__CloseJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseJob(struct soap*, _ns1__CloseJob*);
    @endcode

  - <ns1:CloseJobResponse> @ref _ns1__CloseJobResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseJobResponse(struct soap*, _ns1__CloseJobResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseJobResponse(struct soap*, _ns1__CloseJobResponse*);
    @endcode

  - <ns1:BatchJob> @ref _ns1__BatchJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJob(struct soap*, _ns1__BatchJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJob(struct soap*, _ns1__BatchJob*);
    @endcode

  - <ns1:BatchJobResponse> @ref _ns1__BatchJobResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJobResponse(struct soap*, _ns1__BatchJobResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJobResponse(struct soap*, _ns1__BatchJobResponse*);
    @endcode

  - <ns1:BatchJobEx> @ref _ns1__BatchJobEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJobEx(struct soap*, _ns1__BatchJobEx*);
    @endcode

  - <ns1:BatchJobExResponse> @ref _ns1__BatchJobExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BatchJobExResponse(struct soap*, _ns1__BatchJobExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BatchJobExResponse(struct soap*, _ns1__BatchJobExResponse*);
    @endcode

  - <ns1:GetExpiration> @ref _ns1__GetExpiration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetExpiration(struct soap*, _ns1__GetExpiration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetExpiration(struct soap*, _ns1__GetExpiration*);
    @endcode

  - <ns1:GetExpirationResponse> @ref _ns1__GetExpirationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetExpirationResponse(struct soap*, _ns1__GetExpirationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetExpirationResponse(struct soap*, _ns1__GetExpirationResponse*);
    @endcode

  - <ns1:GetAllJobs> @ref _ns1__GetAllJobs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobs(struct soap*, _ns1__GetAllJobs*);
    @endcode

  - <ns1:GetAllJobsResponse> @ref _ns1__GetAllJobsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobsResponse(struct soap*, _ns1__GetAllJobsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobsResponse(struct soap*, _ns1__GetAllJobsResponse*);
    @endcode

  - <ns1:GetAllJobsEx> @ref _ns1__GetAllJobsEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobsEx(struct soap*, _ns1__GetAllJobsEx*);
    @endcode

  - <ns1:GetAllJobsExResponse> @ref _ns1__GetAllJobsExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAllJobsExResponse(struct soap*, _ns1__GetAllJobsExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAllJobsExResponse(struct soap*, _ns1__GetAllJobsExResponse*);
    @endcode

  - <ns1:CloseExpiredJobs> @ref _ns1__CloseExpiredJobs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseExpiredJobs(struct soap*, _ns1__CloseExpiredJobs*);
    @endcode

  - <ns1:CloseExpiredJobsResponse> @ref _ns1__CloseExpiredJobsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseExpiredJobsResponse(struct soap*, _ns1__CloseExpiredJobsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseExpiredJobsResponse(struct soap*, _ns1__CloseExpiredJobsResponse*);
    @endcode

  - <ns1:CloseAllJobs> @ref _ns1__CloseAllJobs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseAllJobs(struct soap*, _ns1__CloseAllJobs*);
    @endcode

  - <ns1:CloseAllJobsResponse> @ref _ns1__CloseAllJobsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CloseAllJobsResponse(struct soap*, _ns1__CloseAllJobsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CloseAllJobsResponse(struct soap*, _ns1__CloseAllJobsResponse*);
    @endcode

  - <ns1:Diag> @ref _ns1__Diag
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Diag(struct soap*, _ns1__Diag*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Diag(struct soap*, _ns1__Diag*);
    @endcode

  - <ns1:DiagResponse> @ref _ns1__DiagResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DiagResponse(struct soap*, _ns1__DiagResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DiagResponse(struct soap*, _ns1__DiagResponse*);
    @endcode

  - <ns1:DiagEx> @ref _ns1__DiagEx
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DiagEx(struct soap*, _ns1__DiagEx*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DiagEx(struct soap*, _ns1__DiagEx*);
    @endcode

  - <ns1:DiagExResponse> @ref _ns1__DiagExResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DiagExResponse(struct soap*, _ns1__DiagExResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DiagExResponse(struct soap*, _ns1__DiagExResponse*);
    @endcode

*/

/* End of generated/prototypes.h */
